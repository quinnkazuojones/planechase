{"ast":null,"code":"import _slicedToArray from \"/Users/quinnjones/Desktop/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\nconst useMultiKeyPress = callback => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        keys = _useState2[0],\n        set = _useState2[1];\n\n  useEffect(() => {\n    callback && callback(keys);\n  }, [keys]);\n  useEffect(() => {\n    const downHandler = ({\n      code\n    }) => {\n      if (!keys.some(key => key === code)) {\n        const newKeys = [...keys, code];\n        set(newKeys);\n      }\n    };\n\n    const upHandler = ({\n      code\n    }) => {\n      const newKeys = keys.filter(key => key !== code);\n      set(newKeys);\n    };\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  });\n  return keys;\n};\n\nexport default useMultiKeyPress;","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/src/hooks/useMultiKeyPress.js"],"names":["useState","useEffect","useMultiKeyPress","callback","keys","set","downHandler","code","some","key","newKeys","upHandler","filter","window","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,gBAAgB,GAAGC,QAAQ,IAAI;AAAA,oBACfH,QAAQ,CAAC,EAAD,CADO;AAAA;AAAA,QAC5BI,IAD4B;AAAA,QACtBC,GADsB;;AAGnCJ,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,QAAQ,IAAIA,QAAQ,CAACC,IAAD,CAApB;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,WAAW,GAAG,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAChC,UAAI,CAACH,IAAI,CAACI,IAAL,CAAUC,GAAG,IAAIA,GAAG,KAAKF,IAAzB,CAAL,EAAqC;AACnC,cAAMG,OAAO,GAAG,CAAC,GAAGN,IAAJ,EAAUG,IAAV,CAAhB;AACAF,QAAAA,GAAG,CAACK,OAAD,CAAH;AACD;AACF,KALD;;AAOA,UAAMC,SAAS,GAAG,CAAC;AAAEJ,MAAAA;AAAF,KAAD,KAAc;AAC9B,YAAMG,OAAO,GAAGN,IAAI,CAACQ,MAAL,CAAYH,GAAG,IAAIA,GAAG,KAAKF,IAA3B,CAAhB;AACAF,MAAAA,GAAG,CAACK,OAAD,CAAH;AACD,KAHD;;AAKAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCR,WAAnC;AACAO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCH,SAAjC;AAEA,WAAO,MAAM;AACXE,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCT,WAAtC;AACAO,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCJ,SAApC;AACD,KAHD;AAID,GApBQ,CAAT;AAsBA,SAAOP,IAAP;AACD,CA9BD;;AAgCA,eAAeF,gBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useMultiKeyPress = callback => {\n  const [keys, set] = useState([]);\n\n  useEffect(() => {\n    callback && callback(keys);\n  }, [keys]);\n\n  useEffect(() => {\n    const downHandler = ({ code }) => {\n      if (!keys.some(key => key === code)) {\n        const newKeys = [...keys, code];\n        set(newKeys);\n      }\n    };\n\n    const upHandler = ({ code }) => {\n      const newKeys = keys.filter(key => key !== code);\n      set(newKeys);\n    };\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  });\n\n  return keys;\n};\n\nexport default useMultiKeyPress;\n"]},"metadata":{},"sourceType":"module"}