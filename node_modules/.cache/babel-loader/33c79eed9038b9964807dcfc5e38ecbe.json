{"ast":null,"code":"import _slicedToArray from\"/Users/quinnjones/Desktop/planechase/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useRef,useState,useEffect}from\"react\";import ResizeObserver from\"resize-observer-polyfill\";var useMeasure=function useMeasure(){var ref=useRef();var _useState=useState({left:0,top:0,width:0,height:0}),_useState2=_slicedToArray(_useState,2),bounds=_useState2[0],set=_useState2[1];var _useState3=useState(function(){return new ResizeObserver(function(_ref){var _ref2=_slicedToArray(_ref,1),entry=_ref2[0];return set(entry.contentRect);});}),_useState4=_slicedToArray(_useState3,1),ro=_useState4[0];useEffect(function(){return ro.observe(ref.current),ro.disconnect;},[]);return[{ref:ref},bounds];};export default useMeasure;","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/planechase/src/hooks/useMeasure.js"],"names":["useRef","useState","useEffect","ResizeObserver","useMeasure","ref","left","top","width","height","bounds","set","entry","contentRect","ro","observe","current","disconnect"],"mappings":"kIAAA,OAASA,MAAT,CAAiBC,QAAjB,CAA2BC,SAA3B,KAA4C,OAA5C,CACA,MAAOC,CAAAA,cAAP,KAA2B,0BAA3B,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CAEvB,GAAMC,CAAAA,GAAG,CAAGL,MAAM,EAAlB,CAFuB,cAGDC,QAAQ,CAAC,CAAEK,IAAI,CAAE,CAAR,CAAWC,GAAG,CAAE,CAAhB,CAAmBC,KAAK,CAAE,CAA1B,CAA6BC,MAAM,CAAE,CAArC,CAAD,CAHP,wCAGhBC,MAHgB,eAGRC,GAHQ,8BAIVV,QAAQ,CACnB,iBAAM,IAAIE,CAAAA,cAAJ,CAAmB,gDAAES,KAAF,gBAAaD,CAAAA,GAAG,CAACC,KAAK,CAACC,WAAP,CAAhB,EAAnB,CAAN,EADmB,CAJE,yCAIhBC,EAJgB,eAQvBZ,SAAS,CAAC,iBAAOY,CAAAA,EAAE,CAACC,OAAH,CAAWV,GAAG,CAACW,OAAf,EAAyBF,EAAE,CAACG,UAAnC,EAAD,CAAiD,EAAjD,CAAT,CACA,MAAO,CAAC,CAAEZ,GAAG,CAAHA,GAAF,CAAD,CAAUK,MAAV,CAAP,CACD,CAVD,CAYA,cAAeN,CAAAA,UAAf","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nconst useMeasure = () => {\n  \n  const ref = useRef();\n  const [bounds, set] = useState({ left: 0, top: 0, width: 0, height: 0 });\n  const [ro] = useState(\n    () => new ResizeObserver(([entry]) => set(entry.contentRect))\n  );\n\n  useEffect(() => (ro.observe(ref.current), ro.disconnect), []);\n  return [{ ref }, bounds];\n};\n\nexport default useMeasure;"]},"metadata":{},"sourceType":"module"}