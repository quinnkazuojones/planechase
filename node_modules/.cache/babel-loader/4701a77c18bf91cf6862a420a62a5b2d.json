{"ast":null,"code":"import _slicedToArray from \"/Users/quinnjones/Desktop/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst useKeyPress = () => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        keys = _useState2[0],\n        set = _useState2[1];\n\n  useEffect(() => {\n    const downHandler = ({\n      code\n    }) => {\n      if (!keys.some(key === code)) {\n        setKeyPressed(newKeys);\n      }\n    };\n\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n  return keyPressed;\n};\n\nexport default useKeyPress;","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/src/hooks/useMultiKeyPress.js"],"names":["useState","useEffect","useKeyPress","keys","set","downHandler","code","some","key","setKeyPressed","newKeys","upHandler","window","addEventListener","removeEventListener","keyPressed"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA,oBAEJF,QAAQ,EAFJ;AAAA;AAAA,QAEjBG,IAFiB;AAAA,QAEXC,GAFW;;AAIxBH,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMI,WAAW,GAAG,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAY;AAC9B,UAAI,CAACH,IAAI,CAACI,IAAL,CAAUC,GAAG,KAAKF,IAAlB,CAAL,EAA8B;AAC5BG,QAAAA,aAAa,CAACC,OAAD,CAAb;AACD;AACF,KAJD;;AAMA,UAAMC,SAAS,GAAG,MAAM;AACtBF,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAFD;;AAIAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCR,WAAnC;AACAO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC;AAEA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCT,WAAtC;AACAO,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,SAApC;AACD,KAHD;AAID,GAnBQ,CAAT;AAqBA,SAAOI,UAAP;AACD,CA1BD;;AA4BA,eAAeb,WAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useKeyPress = () => {\n\n  const [keys, set] = useState();\n\n  useEffect(() => {\n\n    const downHandler = ({code}) => {\n      if (!keys.some(key === code)) {\n        setKeyPressed(newKeys);\n      }\n    };\n\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n\n  return keyPressed;\n};\n\nexport default useKeyPress;"]},"metadata":{},"sourceType":"module"}