{"ast":null,"code":"import _slicedToArray from \"/Users/quinnjones/Desktop/planechase/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\nconst useMultiKeyPress = callback => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        keys = _useState2[0],\n        set = _useState2[1];\n\n  useEffect(() => {\n    callback && callback(keys);\n  }, [keys]);\n  useEffect(() => {\n    const downHandler = ({\n      code\n    }) => {\n      if (!keys.includes(code)) {\n        const newKeys = [...keys, code];\n        set(newKeys);\n      }\n    };\n\n    const upHandler = ({\n      code\n    }) => {\n      const newKeys = keys.filter(key => key !== code);\n      set(newKeys);\n    };\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  });\n  return keys;\n};\n\nexport default useMultiKeyPress;","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/planechase/src/hooks/useMultiKeyPress.js"],"names":["useState","useEffect","useMultiKeyPress","callback","keys","set","downHandler","code","includes","newKeys","upHandler","filter","key","window","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,gBAAgB,GAAGC,QAAQ,IAAI;AAAA,oBACfH,QAAQ,CAAC,EAAD,CADO;AAAA;AAAA,QAC5BI,IAD4B;AAAA,QACtBC,GADsB;;AAGnCJ,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,QAAQ,IAAIA,QAAQ,CAACC,IAAD,CAApB;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,WAAW,GAAG,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAY;AAC9B,UAAI,CAACH,IAAI,CAACI,QAAL,CAAcD,IAAd,CAAL,EAA0B;AACxB,cAAME,OAAO,GAAG,CAAC,GAAGL,IAAJ,EAAUG,IAAV,CAAhB;AACAF,QAAAA,GAAG,CAACI,OAAD,CAAH;AACD;AACF,KALD;;AAOA,UAAMC,SAAS,GAAG,CAAC;AAAEH,MAAAA;AAAF,KAAD,KAAc;AAC9B,YAAME,OAAO,GAAGL,IAAI,CAACO,MAAL,CAAYC,GAAG,IAAIA,GAAG,KAAKL,IAA3B,CAAhB;AACAF,MAAAA,GAAG,CAACI,OAAD,CAAH;AACD,KAHD;;AAKAI,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCR,WAAnC;AACAO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCJ,SAAjC;AAEA,WAAO,MAAM;AACXG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCT,WAAtC;AACAO,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCL,SAApC;AACD,KAHD;AAID,GApBQ,CAAT;AAsBA,SAAON,IAAP;AACD,CA9BD;;AAgCA,eAAeF,gBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useMultiKeyPress = callback => {\n  const [keys, set] = useState([]);\n\n  useEffect(() => {\n    callback && callback(keys);\n  }, [keys]);\n\n  useEffect(() => {\n    const downHandler = ({code}) => {\n      if (!keys.includes(code)) {\n        const newKeys = [...keys, code];\n        set(newKeys);\n      }\n    };\n\n    const upHandler = ({ code }) => {\n      const newKeys = keys.filter(key => key !== code);\n      set(newKeys);\n    };\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  });\n\n  return keys;\n};\n\nexport default useMultiKeyPress;\n"]},"metadata":{},"sourceType":"module"}