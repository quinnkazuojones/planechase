{"ast":null,"code":"import _slicedToArray from \"/Users/quinnjones/Desktop/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/quinnjones/Desktop/planechase/src/components/HelpView.js\";\nimport React, { useState, useEffect } from \"react\";\n\nconst HelpView = () => {\n  const _useState = useState('overview'),\n        _useState2 = _slicedToArray(_useState, 2),\n        view = _useState2[0],\n        set = _useState2[1];\n\n  return React.createElement(\"div\", {\n    className: \"help-panel-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"help-panel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Help\"), React.createElement(\"div\", {\n    className: \"switch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    style: {\n      textAlign: \"right\"\n    },\n    onClick: () => set('overview'),\n    className: view === 'overview' ? \"\" : \"faded\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Overview\"), React.createElement(\"h2\", {\n    onClick: () => set('controls'),\n    className: set === 'controls' ? \"\" : \"faded\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Controls\"), React.createElement(\"h2\", {\n    onClick: () => set('creator'),\n    className: set === 'creator' ? \"\" : \"faded\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Controls\")), React.createElement(\"div\", {\n    className: \"bordered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, set === 'overview' ? React.createElement(Overview, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }) : set === 'controls' ? React.createElement(Controls, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }) : React.createElement(Creator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })))));\n};\n\nconst Overview = () => {\n  return React.createElement(\"div\", {\n    className: \"overview-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"What is Planechase?\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"To play a game of Planechase, each player needs his or her own planar deck, consisting of at least 10 different oversized cards. The players may also use a \\\"shared planar deck,\\\" which requires ten cards per player. Players cannot use more than one plane with any given name. When the game begins, the player going first reveals the top of his or her planar deck (or the shared planar deck), which is the plane the game starts on. Each plane card has a name, a type, one ability that applies at all times (either to all players or to whoever is the turn player at the time), and one \\\"Chaos\\\" ability.\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Chaos\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"To play a game of Planechase, each player needs his or her own planar deck, consisting of at least 10 different oversized cards. The players may also use a \\\"shared planar deck,\\\" which requires ten cards per player. Players cannot use more than one plane with any given name. When the game begins, the player going first reveals the top of his or her planar deck (or the shared planar deck), which is the plane the game starts on. Each plane card has a name, a type, one ability that applies at all times (either to all players or to whoever is the turn player at the time), and one \\\"Chaos\\\" ability.\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Planeswalking\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"To play a game of Planechase, each player needs his or her own planar deck, consisting of at least 10 different oversized cards. The players may also use a \\\"shared planar deck,\\\" which requires ten cards per player. Players cannot use more than one plane with any given name. When the game begins, the player going first reveals the top of his or her planar deck (or the shared planar deck), which is the plane the game starts on. Each plane card has a name, a type, one ability that applies at all times (either to all players or to whoever is the turn player at the time), and one \\\"Chaos\\\" ability.\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Phenomena\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"To play a game of Planechase, each player needs his or her own planar deck, consisting of at least 10 different oversized cards. The players may also use a \\\"shared planar deck,\\\" which requires ten cards per player. Players cannot use more than one plane with any given name. When the game begins, the player going first reveals the top of his or her planar deck (or the shared planar deck), which is the plane the game starts on. Each plane card has a name, a type, one ability that applies at all times (either to all players or to whoever is the turn player at the time), and one \\\"Chaos\\\" ability.\"));\n};\n\nconst Controls = () => {\n  return React.createElement(\"div\", {\n    className: \"controls-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Roll Planar Dice\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Switch Views\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Adjust Player Health\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Action\")), React.createElement(\"div\", {\n    className: \"line\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"line-inner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"[TAB]\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"[SPACE]\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"[Player #] + [- or +]\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"[ENTER]\")));\n};\n\nconst Creator = () => {\n  return React.createElement(\"div\", {\n    className: \"creator-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"hi there\");\n};\n\nexport default HelpView;","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/src/components/HelpView.js"],"names":["React","useState","useEffect","HelpView","view","set","textAlign","Overview","Controls","Creator"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst HelpView = () => {\n  const [view, set] = useState('overview');\n\n  return (\n    <div className=\"help-panel-container\">\n      <div className=\"help-panel\">\n        <h1>Help</h1>\n        <div className=\"switch\">\n          <h2\n            style={{ textAlign: \"right\" }}\n            onClick={() => set('overview')}\n            className={view==='overview' ? \"\" : \"faded\"}\n          >\n            Overview\n          </h2>\n          <h2\n            onClick={() => set('controls')}\n            className={set==='controls' ? \"\" : \"faded\"}\n          >\n            Controls\n          </h2>\n          <h2\n            onClick={() => set('creator')}\n            className={set==='creator' ? \"\" : \"faded\"}\n          >\n            Controls\n          </h2>\n        </div>\n        <div className=\"bordered\">\n          <div className=\"content\">\n            {set==='overview' ? <Overview /> : set==='controls' ? <Controls /> : <Creator />}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Overview = () => {\n  return (\n    <div className=\"overview-container\">\n      <h2>What is Planechase?</h2>\n      <p>\n        To play a game of Planechase, each player needs his or her own planar\n        deck, consisting of at least 10 different oversized cards. The players\n        may also use a \"shared planar deck,\" which requires ten cards per\n        player. Players cannot use more than one plane with any given name. When\n        the game begins, the player going first reveals the top of his or her\n        planar deck (or the shared planar deck), which is the plane the game\n        starts on. Each plane card has a name, a type, one ability that applies\n        at all times (either to all players or to whoever is the turn player at\n        the time), and one \"Chaos\" ability.\n      </p>\n      <h2>Chaos</h2>\n      <p>\n        To play a game of Planechase, each player needs his or her own planar\n        deck, consisting of at least 10 different oversized cards. The players\n        may also use a \"shared planar deck,\" which requires ten cards per\n        player. Players cannot use more than one plane with any given name. When\n        the game begins, the player going first reveals the top of his or her\n        planar deck (or the shared planar deck), which is the plane the game\n        starts on. Each plane card has a name, a type, one ability that applies\n        at all times (either to all players or to whoever is the turn player at\n        the time), and one \"Chaos\" ability.\n      </p>\n      <h2>Planeswalking</h2>\n      <p>\n        To play a game of Planechase, each player needs his or her own planar\n        deck, consisting of at least 10 different oversized cards. The players\n        may also use a \"shared planar deck,\" which requires ten cards per\n        player. Players cannot use more than one plane with any given name. When\n        the game begins, the player going first reveals the top of his or her\n        planar deck (or the shared planar deck), which is the plane the game\n        starts on. Each plane card has a name, a type, one ability that applies\n        at all times (either to all players or to whoever is the turn player at\n        the time), and one \"Chaos\" ability.\n      </p>\n      <h2>Phenomena</h2>\n      <p>\n        To play a game of Planechase, each player needs his or her own planar\n        deck, consisting of at least 10 different oversized cards. The players\n        may also use a \"shared planar deck,\" which requires ten cards per\n        player. Players cannot use more than one plane with any given name. When\n        the game begins, the player going first reveals the top of his or her\n        planar deck (or the shared planar deck), which is the plane the game\n        starts on. Each plane card has a name, a type, one ability that applies\n        at all times (either to all players or to whoever is the turn player at\n        the time), and one \"Chaos\" ability.\n      </p>\n    </div>\n  );\n};\n\nconst Controls = () => {\n  return (\n    <div className=\"controls-container\">\n      <div className=\"left\">\n        <h2>Roll Planar Dice</h2>\n        <h2>Switch Views</h2>\n        <h2>Adjust Player Health</h2>\n        <h2>Action</h2>\n      </div>\n      <div className=\"line\">\n        <div className=\"line-inner\"></div>\n      </div>\n      <div className=\"right\">\n        <h2>[TAB]</h2>\n        <h2>[SPACE]</h2>\n        <h2>[Player #] + [- or +]</h2>\n        <h2>[ENTER]</h2>\n      </div>\n    </div>\n  );\n};\n\nconst Creator = () => {\n    return (\n        <div className=\"creator-container\">\n            hi there\n        </div>\n    )\n}\n\nexport default HelpView;\n"]},"metadata":{},"sourceType":"module"}