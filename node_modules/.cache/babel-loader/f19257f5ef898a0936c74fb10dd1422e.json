{"ast":null,"code":"import _slicedToArray from \"/Users/quinnjones/Desktop/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/quinnjones/Desktop/planechase/src/Context.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { data } from \"./assets/cards\";\nexport const Context = createContext();\n\nconst shuffle = array => {\n  let currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\nlet cards = shuffle(data);\n\nconst ContextProvider = ({\n  children\n}) => {\n  const _useState = useState([{\n    name: \"Austin\",\n    health: 18\n  }, {\n    name: \"Ian\",\n    health: 23\n  }, {\n    name: \"Quinn\",\n    health: 12\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        players = _useState2[0],\n        setPlayers = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gridView = _useState4[0],\n        setGridView = _useState4[1];\n\n  const _useState5 = useState([[null, null, null], [null, null, null], [null, null, null]]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        grid = _useState6[0],\n        setGrid = _useState6[1];\n\n  useEffect(() => {\n    checkGrid();\n  }, []);\n\n  const checkGrid = () => {\n    let newGrid = [...grid];\n    grid.forEach((row, i) => {\n      row.forEach((card, _i) => {\n        if (i === 0 && _i === 1 || i === 1 && _i === 0 || i === 1 && _i === 1 || i === 1 && _i === 2 || i === 2 && _i === 1) {\n          if (!newGrid[i][_i]) {\n            newGrid[i][_i] = getCard();\n          }\n        }\n      });\n    });\n    setGrid(newGrid);\n  };\n\n  useEffect(() => {\n    console.log(grid);\n  });\n\n  const getCard = () => {\n    const card = cards[0];\n    cards = cards.slice(1, cards.length);\n    return card;\n  };\n\n  return React.createElement(Context.Provider, {\n    value: {\n      players,\n      setPlayers,\n      gridView,\n      setGridView\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, children);\n};\n\nexport default ContextProvider;","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/src/Context.js"],"names":["React","createContext","useState","useEffect","data","Context","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","cards","ContextProvider","children","name","health","players","setPlayers","gridView","setGridView","grid","setGrid","checkGrid","newGrid","forEach","row","i","card","_i","getCard","console","log","slice"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,IAAT,QAAqB,gBAArB;AAEA,OAAO,MAAMC,OAAO,GAAGJ,aAAa,EAA7B;;AAEP,MAAMK,OAAO,GAAGC,KAAK,IAAI;AACvB,MAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,MACEC,cADF;AAAA,MAEEC,WAFF;;AAGA,SAAO,MAAMH,YAAb,EAA2B;AACzBG,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,IAAAA,YAAY,IAAI,CAAhB;AACAE,IAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,IAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,IAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AACD,SAAOH,KAAP;AACD,CAZD;;AAcA,IAAIQ,KAAK,GAAGT,OAAO,CAACF,IAAD,CAAnB;;AAEA,MAAMY,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA,oBACVf,QAAQ,CAAC,CACrC;AAAEgB,IAAAA,IAAI,EAAE,QAAR;AAAkBC,IAAAA,MAAM,EAAE;AAA1B,GADqC,EAErC;AAAED,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GAFqC,EAGrC;AAAED,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,MAAM,EAAE;AAAzB,GAHqC,CAAD,CADE;AAAA;AAAA,QACjCC,OADiC;AAAA,QACxBC,UADwB;;AAAA,qBAMRnB,QAAQ,CAAC,IAAD,CANA;AAAA;AAAA,QAMjCoB,QANiC;AAAA,QAMvBC,WANuB;;AAAA,qBAOhBrB,QAAQ,CAAC,CAC/B,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAD+B,EAE/B,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAF+B,EAG/B,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAH+B,CAAD,CAPQ;AAAA;AAAA,QAOjCsB,IAPiC;AAAA,QAO3BC,OAP2B;;AAaxCtB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,SAAS,GAAG,MAAM;AACtB,QAAIC,OAAO,GAAG,CAAC,GAAGH,IAAJ,CAAd;AAEAA,IAAAA,IAAI,CAACI,OAAL,CAAa,CAACC,GAAD,EAAMC,CAAN,KAAY;AACvBD,MAAAA,GAAG,CAACD,OAAJ,CAAY,CAACG,IAAD,EAAOC,EAAP,KAAc;AACxB,YAAGF,CAAC,KAAK,CAAN,IAAWE,EAAE,KAAK,CAAlB,IAAuBF,CAAC,KAAK,CAAN,IAAWE,EAAE,KAAK,CAAzC,IAA8CF,CAAC,KAAK,CAAN,IAAWE,EAAE,KAAK,CAAhE,IAAqEF,CAAC,KAAK,CAAN,IAAWE,EAAE,KAAK,CAAvF,IAA4FF,CAAC,KAAK,CAAN,IAAWE,EAAE,KAAK,CAAjH,EAAmH;AAC/G,cAAI,CAACL,OAAO,CAACG,CAAD,CAAP,CAAWE,EAAX,CAAL,EAAoB;AAChBL,YAAAA,OAAO,CAACG,CAAD,CAAP,CAAWE,EAAX,IAAiBC,OAAO,EAAxB;AACH;AACJ;AACF,OAND;AAOD,KARD;AASAR,IAAAA,OAAO,CAACE,OAAD,CAAP;AACD,GAbD;;AAeAxB,EAAAA,SAAS,CAAC,MAAM;AACZ+B,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACH,GAFQ,CAAT;;AAIA,QAAMS,OAAO,GAAG,MAAM;AACpB,UAAMF,IAAI,GAAGhB,KAAK,CAAC,CAAD,CAAlB;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACqB,KAAN,CAAY,CAAZ,EAAerB,KAAK,CAACN,MAArB,CAAR;AACA,WAAOsB,IAAP;AACD,GAJD;;AAMA,SACE,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAEX,MAAAA,OAAF;AAAWC,MAAAA,UAAX;AAAuBC,MAAAA,QAAvB;AAAiCC,MAAAA;AAAjC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,QADH,CADF;AAKD,CA/CD;;AAiDA,eAAeD,eAAf","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { data } from \"./assets/cards\";\n\nexport const Context = createContext();\n\nconst shuffle = array => {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\nlet cards = shuffle(data);\n\nconst ContextProvider = ({ children }) => {\n  const [players, setPlayers] = useState([\n    { name: \"Austin\", health: 18 },\n    { name: \"Ian\", health: 23 },\n    { name: \"Quinn\", health: 12 }\n  ]);\n  const [gridView, setGridView] = useState(true);\n  const [grid, setGrid] = useState([\n    [null, null, null],\n    [null, null, null],\n    [null, null, null]\n  ]);\n\n  useEffect(() => {\n    checkGrid();\n  }, []);\n\n  const checkGrid = () => {\n    let newGrid = [...grid];\n\n    grid.forEach((row, i) => {\n      row.forEach((card, _i) => {\n        if(i === 0 && _i === 1 || i === 1 && _i === 0 || i === 1 && _i === 1 || i === 1 && _i === 2 || i === 2 && _i === 1){\n            if (!newGrid[i][_i]){\n                newGrid[i][_i] = getCard();\n            } \n        }\n      });\n    });\n    setGrid(newGrid);\n  };\n\n  useEffect(() => {\n      console.log(grid);\n  })\n\n  const getCard = () => {\n    const card = cards[0];\n    cards = cards.slice(1, cards.length);\n    return card;\n  };\n\n  return (\n    <Context.Provider value={{ players, setPlayers, gridView, setGridView }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default ContextProvider;\n"]},"metadata":{},"sourceType":"module"}