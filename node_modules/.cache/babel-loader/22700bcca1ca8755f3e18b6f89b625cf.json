{"ast":null,"code":"import _slicedToArray from \"/Users/quinnjones/Desktop/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nconst useKeyPress = callback => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        keysPressed = _useState2[0],\n        setKeysPressed = _useState2[1];\n\n  useEffect(() => {\n    const downHandler = ({\n      code\n    }) => {\n      if (keyPressed !== code) {\n        setKeyPressed(code);\n        callback && callback(code);\n      }\n    };\n\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n  return keyPressed;\n};\n\nexport default useKeyPress;","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/src/hooks/useMultiKeyPress.js"],"names":["useState","useEffect","useKeyPress","callback","keysPressed","setKeysPressed","downHandler","code","keyPressed","setKeyPressed","upHandler","window","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,WAAW,GAAGC,QAAQ,IAAI;AAAA,oBAEQH,QAAQ,EAFhB;AAAA;AAAA,QAEvBI,WAFuB;AAAA,QAEVC,cAFU;;AAI9BJ,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMK,WAAW,GAAG,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAY;AAC9B,UAAIC,UAAU,KAAKD,IAAnB,EAAyB;AACvBE,QAAAA,aAAa,CAACF,IAAD,CAAb;AACAJ,QAAAA,QAAQ,IAAIA,QAAQ,CAACI,IAAD,CAApB;AACD;AACF,KALD;;AAOA,UAAMG,SAAS,GAAG,MAAM;AACtBD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAFD;;AAIAE,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCN,WAAnC;AACAK,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC;AAEA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCP,WAAtC;AACAK,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,SAApC;AACD,KAHD;AAID,GApBQ,CAAT;AAsBA,SAAOF,UAAP;AACD,CA3BD;;AA6BA,eAAeN,WAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useKeyPress = callback => {\n\n  const [keysPressed, setKeysPressed] = useState();\n\n  useEffect(() => {\n\n    const downHandler = ({code}) => {\n      if (keyPressed !== code) {\n        setKeyPressed(code);\n        callback && callback(code);\n      }\n    };\n\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n\n  return keyPressed;\n};\n\nexport default useKeyPress;"]},"metadata":{},"sourceType":"module"}