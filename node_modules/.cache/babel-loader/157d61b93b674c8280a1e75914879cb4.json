{"ast":null,"code":"import _slicedToArray from \"/Users/quinnjones/Desktop/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/quinnjones/Desktop/planechase/src/Context.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { data } from \"./assets/cards\";\nimport { shuffle, make2dArray } from \"./utils\";\nimport constants from './constants';\nimport { useHistory, useLocation } from 'react-router-dom';\nexport const Context = createContext();\nlet cards = shuffle(data);\nexport const checkGrid = grid => {\n  let newGrid = [...grid];\n  grid.forEach((row, i) => {\n    row.forEach((card, _i) => {\n      if (i === 0 && _i === 1 || i === 1 && _i === 0 || i === 1 && _i === 1 || i === 1 && _i === 2 || i === 2 && _i === 1) {\n        if (!newGrid[i][_i]) {\n          newGrid[i][_i] = getCard();\n        }\n      }\n    });\n  });\n  return newGrid;\n};\n\nconst getCard = () => {\n  const card = cards[0];\n  cards = cards.slice(1, cards.length);\n  return card;\n};\n\nconst ContextProvider = ({\n  children\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        players = _useState2[0],\n        setPlayers = _useState2[1];\n\n  const _useState3 = useState(make2dArray()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        grid = _useState4[0],\n        setGrid = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        current = _useState6[0],\n        setCurrent = _useState6[1];\n\n  const _useState7 = useState(constants.SETTING_UP),\n        _useState8 = _slicedToArray(_useState7, 2),\n        status = _useState8[0],\n        setStatus = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        started = _useState10[0],\n        setStarted = _useState10[1];\n\n  useEffect(() => {\n    setGrid(checkGrid(grid));\n  }, []);\n  useEffect(() => {\n    if (grid) setCurrent(grid[1][1]);\n  }, [grid]);\n  return React.createElement(Context.Provider, {\n    value: {\n      started,\n      setStarted,\n      players,\n      setPlayers,\n      grid,\n      setGrid,\n      current,\n      status,\n      setStatus\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, children);\n};\n\nexport default ContextProvider;","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/src/Context.js"],"names":["React","createContext","useState","useEffect","data","shuffle","make2dArray","constants","useHistory","useLocation","Context","cards","checkGrid","grid","newGrid","forEach","row","i","card","_i","getCard","slice","length","ContextProvider","children","players","setPlayers","setGrid","current","setCurrent","SETTING_UP","status","setStatus","started","setStarted"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { data } from \"./assets/cards\";\nimport { shuffle, make2dArray } from \"./utils\";\nimport constants from './constants';\nimport {useHistory, useLocation} from 'react-router-dom';\n\nexport const Context = createContext();\n\nlet cards = shuffle(data);\n\nexport const checkGrid = grid => {\n  let newGrid = [...grid];\n\n  grid.forEach((row, i) => {\n    row.forEach((card, _i) => {\n      if (\n        (i === 0 && _i === 1) ||\n        (i === 1 && _i === 0) ||\n        (i === 1 && _i === 1) ||\n        (i === 1 && _i === 2) ||\n        (i === 2 && _i === 1)\n      ) {\n        if (!newGrid[i][_i]) {\n          newGrid[i][_i] = getCard();\n        }\n      }\n    });\n  });\n  return newGrid;\n};\n\nconst getCard = () => {\n  const card = cards[0];\n  cards = cards.slice(1, cards.length);\n  return card;\n};\n\nconst ContextProvider = ({ children }) => {\n  const [players, setPlayers] = useState([]);\n  const [grid, setGrid] = useState(make2dArray());\n  const [current, setCurrent] = useState();\n  const [status, setStatus] = useState(constants.SETTING_UP);\n  const [started, setStarted] = useState(false);\n\n  useEffect(() => {\n    setGrid(checkGrid(grid));\n  }, []);\n\n  useEffect(() => {\n    if (grid) setCurrent(grid[1][1]);\n  }, [grid]);\n\n  return (\n    <Context.Provider\n      value={{\n        started,\n        setStarted,\n        players,\n        setPlayers,\n        grid,\n        setGrid,\n        current,\n        status,\n        setStatus\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default ContextProvider;\n"]},"metadata":{},"sourceType":"module"}