{"ast":null,"code":"import _slicedToArray from \"/Users/quinnjones/Desktop/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/quinnjones/Desktop/planechase/src/Context.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { data } from \"./assets/cards\";\nimport { shuffle, make2dArray } from './utils';\nexport const Context = createContext();\nlet cards = shuffle(data);\nexport const checkGrid = grid => {\n  let newGrid = [...grid];\n  grid.forEach((row, i) => {\n    row.forEach((card, _i) => {\n      if (i === 0 && _i === 1 || i === 1 && _i === 0 || i === 1 && _i === 1 || i === 1 && _i === 2 || i === 2 && _i === 1) {\n        if (!newGrid[i][_i]) {\n          newGrid[i][_i] = getCard();\n        }\n      }\n    });\n  });\n  return newGrid;\n};\n\nconst getCard = () => {\n  const card = cards[0];\n  cards = cards.slice(1, cards.length);\n  return card;\n};\n\nconst ContextProvider = ({\n  children\n}) => {\n  const _useState = useState([{\n    name: \"Austin\",\n    health: 18\n  }, {\n    name: \"Ian\",\n    health: 23\n  }, {\n    name: \"Quinn\",\n    health: 12\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        players = _useState2[0],\n        setPlayers = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gridView = _useState4[0],\n        setGridView = _useState4[1];\n\n  const _useState5 = useState(make2dArray()),\n        _useState6 = _slicedToArray(_useState5, 2),\n        grid = _useState6[0],\n        setGrid = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        current = _useState8[0],\n        setCurrent = _useState8[1];\n\n  const _useState9 = useState(true),\n        _useState10 = _slicedToArray(_useState9, 2),\n        init = _useState10[0],\n        setInit = _useState10[1];\n\n  useEffect(() => {\n    setGrid(checkGrid(grid));\n  }, []);\n  useEffect(() => {\n    if (grid) setCurrent(grid[1][1]);\n  }, [grid]);\n  return React.createElement(Context.Provider, {\n    value: {\n      players,\n      setPlayers,\n      gridView,\n      setGridView,\n      grid,\n      setGrid,\n      current,\n      init,\n      setInit\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, children);\n};\n\nexport default ContextProvider;","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/src/Context.js"],"names":["React","createContext","useState","useEffect","data","shuffle","make2dArray","Context","cards","checkGrid","grid","newGrid","forEach","row","i","card","_i","getCard","slice","length","ContextProvider","children","name","health","players","setPlayers","gridView","setGridView","setGrid","current","setCurrent","init","setInit"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { data } from \"./assets/cards\";\nimport {shuffle, make2dArray} from './utils';\n\nexport const Context = createContext();\n\nlet cards = shuffle(data);\n\nexport const checkGrid = (grid) => {\n  let newGrid = [...grid];\n\n  grid.forEach((row, i) => {\n    row.forEach((card, _i) => {\n      if (\n        (i === 0 && _i === 1) ||\n        (i === 1 && _i === 0) ||\n        (i === 1 && _i === 1) ||\n        (i === 1 && _i === 2) ||\n        (i === 2 && _i === 1)\n      ) {\n        if (!newGrid[i][_i]) {\n          newGrid[i][_i] = getCard();\n        }\n      }\n    });\n  });\n  return newGrid;\n};\n\nconst getCard = () => {\n  const card = cards[0];\n  cards = cards.slice(1, cards.length);\n  return card;\n};\n\nconst ContextProvider = ({ children }) => {\n  const [players, setPlayers] = useState([\n    { name: \"Austin\", health: 18 },\n    { name: \"Ian\", health: 23 },\n    { name: \"Quinn\", health: 12 }\n  ]);\n  const [gridView, setGridView] = useState(true);\n  const [grid, setGrid] = useState(make2dArray());\n  const [current, setCurrent] = useState();\n  const [init, setInit] = useState(true);\n\n  useEffect(() => {\n    setGrid(checkGrid(grid));\n  }, []);\n\n  useEffect(() => {\n    if (grid) setCurrent(grid[1][1]);\n  }, [grid]);\n\n  return (\n    <Context.Provider\n      value={{ players, setPlayers, gridView, setGridView, grid, setGrid, current, init, setInit }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default ContextProvider;\n"]},"metadata":{},"sourceType":"module"}