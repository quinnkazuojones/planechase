{"ast":null,"code":"import _slicedToArray from \"/Users/quinnjones/Desktop/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nexport default function useMultiKeyPress() {\n  const _useState = useState(new Set([])),\n        _useState2 = _slicedToArray(_useState, 2),\n        keysPressed = _useState2[0],\n        setKeyPressed = _useState2[1];\n\n  function downHandler({\n    key\n  }) {\n    setKeyPressed(keysPressed.add(key));\n  }\n\n  const upHandler = ({\n    key\n  }) => {\n    keysPressed.delete(key);\n    setKeyPressed(keysPressed);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keysPressed;\n}","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/src/hooks/useMultiKeyPress.js"],"names":["useState","useEffect","useMultiKeyPress","Set","keysPressed","setKeyPressed","downHandler","key","add","upHandler","delete","window","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA,oBACJF,QAAQ,CAAC,IAAIG,GAAJ,CAAQ,EAAR,CAAD,CADJ;AAAA;AAAA,QAClCC,WADkC;AAAA,QACrBC,aADqB;;AAGzC,WAASC,WAAT,CAAqB;AAAEC,IAAAA;AAAF,GAArB,EAA8B;AAC5BF,IAAAA,aAAa,CAACD,WAAW,CAACI,GAAZ,CAAgBD,GAAhB,CAAD,CAAb;AACD;;AAED,QAAME,SAAS,GAAG,CAAC;AAAEF,IAAAA;AAAF,GAAD,KAAa;AAC7BH,IAAAA,WAAW,CAACM,MAAZ,CAAmBH,GAAnB;AACAF,IAAAA,aAAa,CAACD,WAAD,CAAb;AACD,GAHD;;AAKAH,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCN,WAAnC;AACAK,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCH,SAAjC;AACA,WAAO,MAAM;AACXE,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCP,WAAtC;AACAK,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCJ,SAApC;AACD,KAHD;AAID,GAPQ,EAON,EAPM,CAAT,CAZyC,CAmBjC;;AAER,SAAOL,WAAP;AACD","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function useMultiKeyPress() {\n  const [keysPressed, setKeyPressed] = useState(new Set([]));\n\n  function downHandler({ key }) {\n    setKeyPressed(keysPressed.add(key));\n  }\n\n  const upHandler = ({ key }) => {\n    keysPressed.delete(key);\n    setKeyPressed(keysPressed);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keysPressed;\n}\n"]},"metadata":{},"sourceType":"module"}