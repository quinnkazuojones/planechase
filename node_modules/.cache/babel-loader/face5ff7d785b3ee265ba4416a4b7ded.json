{"ast":null,"code":"import _slicedToArray from\"/Users/quinnjones/Desktop/planechase/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";var useKeyPress=function useKeyPress(callback){var _useState=useState(),_useState2=_slicedToArray(_useState,2),keyPressed=_useState2[0],setKeyPressed=_useState2[1];useEffect(function(){var downHandler=function downHandler(_ref){var code=_ref.code;if(keyPressed!==code){setKeyPressed(code);callback&&callback(code);}};var upHandler=function upHandler(){setKeyPressed(null);};window.addEventListener(\"keydown\",downHandler);window.addEventListener(\"keyup\",upHandler);return function(){window.removeEventListener(\"keydown\",downHandler);window.removeEventListener(\"keyup\",upHandler);};});return keyPressed;};export default useKeyPress;","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/planechase/src/hooks/useKeyPress.js"],"names":["useState","useEffect","useKeyPress","callback","keyPressed","setKeyPressed","downHandler","code","upHandler","window","addEventListener","removeEventListener"],"mappings":"kIAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAC,QAAQ,CAAI,eACMH,QAAQ,EADd,wCACvBI,UADuB,eACXC,aADW,eAG9BJ,SAAS,CAAC,UAAM,CACd,GAAMK,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAc,IAAXC,CAAAA,IAAW,MAAXA,IAAW,CAChC,GAAIH,UAAU,GAAKG,IAAnB,CAAyB,CACvBF,aAAa,CAACE,IAAD,CAAb,CACAJ,QAAQ,EAAIA,QAAQ,CAACI,IAAD,CAApB,CACD,CACF,CALD,CAOA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtBH,aAAa,CAAC,IAAD,CAAb,CACD,CAFD,CAIAI,MAAM,CAACC,gBAAP,CAAwB,SAAxB,CAAmCJ,WAAnC,EACAG,MAAM,CAACC,gBAAP,CAAwB,OAAxB,CAAiCF,SAAjC,EAEA,MAAO,WAAM,CACXC,MAAM,CAACE,mBAAP,CAA2B,SAA3B,CAAsCL,WAAtC,EACAG,MAAM,CAACE,mBAAP,CAA2B,OAA3B,CAAoCH,SAApC,EACD,CAHD,CAID,CAnBQ,CAAT,CAqBA,MAAOJ,CAAAA,UAAP,CACD,CAzBD,CA2BA,cAAeF,CAAAA,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useKeyPress = callback => {\n  const [keyPressed, setKeyPressed] = useState();\n\n  useEffect(() => {\n    const downHandler = ({ code }) => {\n      if (keyPressed !== code) {\n        setKeyPressed(code);\n        callback && callback(code);\n      }\n    };\n\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  });\n\n  return keyPressed;\n};\n\nexport default useKeyPress;\n"]},"metadata":{},"sourceType":"module"}