{"ast":null,"code":"import _slicedToArray from \"/Users/quinnjones/Desktop/planechase/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useRef, useState, useEffect } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nexport const useMeasure = () => {\n  const ref = useRef();\n\n  const _useState = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        bounds = _useState2[0],\n        set = _useState2[1];\n\n  const _useState3 = useState(() => new ResizeObserver(([entry]) => set(entry.contentRect))),\n        _useState4 = _slicedToArray(_useState3, 1),\n        ro = _useState4[0];\n\n  useEffect(() => (ro.observe(ref.current), ro.disconnect), []);\n  return [{\n    ref\n  }, bounds];\n};","map":{"version":3,"sources":["/Users/quinnjones/Desktop/planechase/src/hooks/useMeasure.js"],"names":["useRef","useState","useEffect","ResizeObserver","useMeasure","ref","left","top","width","height","bounds","set","entry","contentRect","ro","observe","current","disconnect"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,QAAMC,GAAG,GAAGL,MAAM,EAAlB;;AAD8B,oBAERC,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE,CAAhB;AAAmBC,IAAAA,KAAK,EAAE,CAA1B;AAA6BC,IAAAA,MAAM,EAAE;AAArC,GAAD,CAFA;AAAA;AAAA,QAEvBC,MAFuB;AAAA,QAEfC,GAFe;;AAAA,qBAGjBV,QAAQ,CACnB,MAAM,IAAIE,cAAJ,CAAmB,CAAC,CAACS,KAAD,CAAD,KAAaD,GAAG,CAACC,KAAK,CAACC,WAAP,CAAnC,CADa,CAHS;AAAA;AAAA,QAGvBC,EAHuB;;AAM9BZ,EAAAA,SAAS,CAAC,OAAOY,EAAE,CAACC,OAAH,CAAWV,GAAG,CAACW,OAAf,GAAyBF,EAAE,CAACG,UAAnC,CAAD,EAAiD,EAAjD,CAAT;AACA,SAAO,CAAC;AAAEZ,IAAAA;AAAF,GAAD,EAAUK,MAAV,CAAP;AACD,CARM","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nexport const useMeasure = () => {\n  const ref = useRef();\n  const [bounds, set] = useState({ left: 0, top: 0, width: 0, height: 0 });\n  const [ro] = useState(\n    () => new ResizeObserver(([entry]) => set(entry.contentRect))\n  );\n  useEffect(() => (ro.observe(ref.current), ro.disconnect), []);\n  return [{ ref }, bounds];\n};\n"]},"metadata":{},"sourceType":"module"}